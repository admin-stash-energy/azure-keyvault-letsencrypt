# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_NAME
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.

name: Deploy to Azure Function App

on:
  push:
    branches: ["main"]

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.' # set this to the path to your function app project, defaults to the repository root
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Install rust
      run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
          sudo apt-get install -qq -y musl-tools

    - name: Release build
      run: |
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --target=x86_64-unknown-linux-musl
          cp target/x86_64-unknown-linux-musl/release/handler .

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
        respect-funcignore: true
